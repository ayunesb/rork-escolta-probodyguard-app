rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getUserData().role == role;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isKYCApproved() {
      return isAuthenticated() && getUserData().kycStatus == 'approved';
    }

    // === USERS COLLECTION ===
    match /users/{userId} {
      allow get: if isAuthenticated() && request.auth.uid == userId;
      
      allow list: if isAuthenticated() && (
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'company')
      );
      
      allow create: if isAuthenticated() && request.auth.uid == userId && 
        request.resource.data.keys().hasAll(['email', 'role', 'firstName', 'lastName', 'phone', 'language', 'kycStatus', 'createdAt']);
      
      allow update: if isAuthenticated() && (
        request.auth.uid == userId ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin')
      );
      
      allow delete: if isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // === BOOKINGS COLLECTION ===
    match /bookings/{bookingId} {
      allow read: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid ||
        resource.data.guardId == request.auth.uid ||
        hasRole('admin') ||
        (hasRole('company') && get(/databases/$(database)/documents/users/$(resource.data.guardId)).data.companyId == request.auth.uid)
      );
      
      allow create: if isAuthenticated() && (
        hasRole('client') || hasRole('company')
      ) && request.resource.data.clientId == request.auth.uid;
      
      allow update: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid ||
        resource.data.guardId == request.auth.uid ||
        hasRole('admin') ||
        (hasRole('company') && get(/databases/$(database)/documents/users/$(resource.data.guardId)).data.companyId == request.auth.uid)
      );
      
      allow delete: if hasRole('admin');
    }

    // === MESSAGES COLLECTION ===
    match /messages/{messageId} {
      allow read: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        exists(/databases/$(database)/documents/bookings/$(resource.data.bookingId)) &&
        (get(/databases/$(database)/documents/bookings/$(resource.data.bookingId)).data.clientId == request.auth.uid ||
         get(/databases/$(database)/documents/bookings/$(resource.data.bookingId)).data.guardId == request.auth.uid) ||
        hasRole('admin')
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid &&
        exists(/databases/$(database)/documents/bookings/$(request.resource.data.bookingId)) &&
        (get(/databases/$(database)/documents/bookings/$(request.resource.data.bookingId)).data.clientId == request.auth.uid ||
         get(/databases/$(database)/documents/bookings/$(request.resource.data.bookingId)).data.guardId == request.auth.uid);
      
      allow update, delete: if false;
    }

    // === DOCUMENTS COLLECTION ===
    match /documents/{documentId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || hasRole('admin')
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if hasRole('admin');
      allow delete: if hasRole('admin') || isOwner(resource.data.userId);
    }

    // === EMERGENCY ALERTS COLLECTION ===
    match /emergencyAlerts/{alertId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        hasRole('admin') ||
        (exists(/databases/$(database)/documents/bookings/$(resource.data.bookingId)) &&
         (get(/databases/$(database)/documents/bookings/$(resource.data.bookingId)).data.clientId == request.auth.uid ||
          get(/databases/$(database)/documents/bookings/$(resource.data.bookingId)).data.guardId == request.auth.uid))
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if hasRole('admin') || isOwner(resource.data.userId);
      allow delete: if hasRole('admin');
    }

    // === PAYMENTS COLLECTION ===
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid ||
        resource.data.guardId == request.auth.uid ||
        hasRole('admin')
      );
      allow create, update: if hasRole('admin');
      allow delete: if false;
    }

    // === KYC AUDIT LOGS ===
    match /kycAuditLog/{logId} {
      allow read, create: if hasRole('admin');
      allow update, delete: if false;
    }

    // === RATE LIMITS ===
    match /rateLimits/{limitId} {
      allow read, write: if false;
    }

    // === SYSTEM LOGS ===
    match /logs/{logId} {
      allow read: if hasRole('admin');
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }

    // === ERRORS ===
    match /errors/{errorId} {
      allow read: if hasRole('admin');
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }

    // === ANALYTICS ===
    match /analytics/{eventId} {
      allow read: if hasRole('admin');
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }

    // === PERFORMANCE ===
    match /performance/{metricId} {
      allow read: if hasRole('admin');
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }

    // === WEBHOOK LOGS ===
    match /webhook_logs/{logId} {
      allow write: if request.auth == null ||
                   (request.auth.token.email_verified == false &&
                    request.auth.token.email.matches('.*@appspot.gserviceaccount.com$'));
      allow read: if hasRole('admin');
    }

    // === DEFAULT DENY ===
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
