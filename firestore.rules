rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        getUserData().role == role;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isKYCApproved() {
      return isAuthenticated() && getUserData().kycStatus == 'approved';
    }
    
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         exists(/databases/$(database)/documents/users/$(userId)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'company' && 
         get(/databases/$(database)/documents/users/$(userId)).data.companyId == request.auth.uid)
      );
      
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      allow update: if isAuthenticated() && (
        isOwner(userId) ||
        hasRole('admin')
      );
      
      allow delete: if hasRole('admin');
    }
    
    match /bookings/{bookingId} {
      allow read: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid ||
        resource.data.guardId == request.auth.uid ||
        hasRole('admin') ||
        (hasRole('company') && get(/databases/$(database)/documents/users/$(resource.data.guardId)).data.companyId == request.auth.uid)
      );
      
      allow create: if isAuthenticated() && (
        hasRole('client') ||
        hasRole('company')
      ) && request.resource.data.clientId == request.auth.uid;
      
      allow update: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid ||
        resource.data.guardId == request.auth.uid ||
        hasRole('admin') ||
        (hasRole('company') && get(/databases/$(database)/documents/users/$(resource.data.guardId)).data.companyId == request.auth.uid)
      );
      
      allow delete: if hasRole('admin');
    }
    
    match /messages/{messageId} {
      allow read: if isAuthenticated() && (
        resource.data.senderId == request.auth.uid ||
        exists(/databases/$(database)/documents/bookings/$(resource.data.bookingId)) &&
        (get(/databases/$(database)/documents/bookings/$(resource.data.bookingId)).data.clientId == request.auth.uid ||
         get(/databases/$(database)/documents/bookings/$(resource.data.bookingId)).data.guardId == request.auth.uid) ||
        hasRole('admin')
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid &&
        exists(/databases/$(database)/documents/bookings/$(request.resource.data.bookingId)) &&
        (get(/databases/$(database)/documents/bookings/$(request.resource.data.bookingId)).data.clientId == request.auth.uid ||
         get(/databases/$(database)/documents/bookings/$(request.resource.data.bookingId)).data.guardId == request.auth.uid);
      
      allow update, delete: if false;
    }
    
    match /documents/{documentId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        hasRole('admin')
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow update: if hasRole('admin');
      
      allow delete: if hasRole('admin') || isOwner(resource.data.userId);
    }
    
    match /emergencyAlerts/{alertId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        hasRole('admin') ||
        (exists(/databases/$(database)/documents/bookings/$(resource.data.bookingId)) &&
         (get(/databases/$(database)/documents/bookings/$(resource.data.bookingId)).data.clientId == request.auth.uid ||
          get(/databases/$(database)/documents/bookings/$(resource.data.bookingId)).data.guardId == request.auth.uid))
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      
      allow update: if hasRole('admin') || isOwner(resource.data.userId);
      
      allow delete: if hasRole('admin');
    }
    
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && (
        resource.data.clientId == request.auth.uid ||
        resource.data.guardId == request.auth.uid ||
        hasRole('admin')
      );
      
      allow create: if hasRole('admin');
      
      allow update: if hasRole('admin');
      
      allow delete: if false;
    }
    
    match /kycAuditLog/{logId} {
      allow read: if hasRole('admin');
      
      allow create: if hasRole('admin');
      
      allow update, delete: if false;
    }
    
    match /rateLimits/{limitId} {
      allow read, write: if false;
    }
    
    match /logs/{logId} {
      allow read: if hasRole('admin');
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    match /errors/{errorId} {
      allow read: if hasRole('admin');
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    match /analytics/{eventId} {
      allow read: if hasRole('admin');
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    match /performance/{metricId} {
      allow read: if hasRole('admin');
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
